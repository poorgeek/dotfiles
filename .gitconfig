[user]
		name = Justin Stockton
		email = poorgeek@gmail.com

[alias]
    # View the SHA, description, and history graph of the latest 10 commits
    l = log --pretty=oneline -n 10 --decorate --graph --abbrev-commit
    la = log --graph --decorate --pretty=oneline --abbrev-commit --all

    # View the current working tree status using the short format
    s = status -sb

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"

    # Clone a repository including all submodules
    c = clone --recursive

    # Commit all changes
    ca = !git add -A && git commit -av

    # Switch to a branch, creating it if necessary
    switch = checkout -B

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Undo current commits
    undo = reset --hard

    # Undo a `git push`
    undopush = push -f origin HEAD^:master

    # Undo the last commit
    oops = reset HEAD^

		# Toggle emails used for profile
		personalprofile = config user.email \"poorgeek@gmail.com\"
		tpgprofile = config user.email \"jstockton@paciellogroup.com\"
		whoami = config user.email

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[core]
    # Use custom `.gitignore` and `.gitattributes`
		excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes
    quotepath = off

[color]
    # Use colors in Git commands that are capable of colored output when outputting to the terminal
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true
[push]
    default = simple
[branch "master"]
    remote = origin
    merge = refs/heads/master
[branch "develop"]
    remote = origin
    merge = refs/heads/develop

# URL shorthands
[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
    insteadOf = "github:"
[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
    insteadOf = "gist:"
[difftool "sourcetree"]
    cmd = opendiff \"$LOCAL\" \"$REMOTE\"
    path =
[mergetool "sourcetree"]
    cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
    trustExitCode = true
